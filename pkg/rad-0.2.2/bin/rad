#!/usr/bin/env ruby

begin
  require 'rubygems'
rescue LoadError
  # no rubygems to load, so we fail silently
end

require 'optparse'
require 'fileutils'
require 'yaml'



class OptionParser #:nodoc:
    
  def self.parse(args)
    # defaults
    
    options = {"hardware" => {
                "serial_port"      => '/dev/tty.usbserial*', 
                "mcu"              => "atmega168", 
                "physical_reset"   => false
                },
                "software" => {
                  "arduino_root"   => "/Applications/arduino-0011"
                 }
               }
    
    opts = OptionParser.new do |opts|
      
      opts.banner = <<-BANNER
Build a directory for your RAD Project and install RAD in its vendor sub-directory.

Usage: #{File.basename($0)} <sketch_dir_name> <options for config>
      BANNER
      
      opts.on("-p", "--port [SERIAL PORT]", 
              "Path to your serial port", 
              "   (default: #{options['hardware']['serial_port']})") do |port|
              
        options["hardware"]["serial_port"] = port if port
      end
      
       opts.on("-m", "--mcu [PROCESSOR TYPE]", 
              "Type of processor on your board", 
              "   (default: #{options['hardware']['mcu']})") do |port|
              
        options["hardware"]["serial_port"] = port if port
      end
      
      opts.on("-r", "--reset [RESET REQUIRED]", 
              "Require a hardware reset before uploading?",
              "   (default: #{options['hardware']['physical_reset']})") do |no_reset|
        options["hardware"]["physical_reset"] = true unless no_reset
      end
      
      opts.on("-a", "--arduino [ARDUINO DIR]", 
              "Path to your Arduino install",
              "   (default: #{options['software']['arduino_root']})") do |arduino|
        options["software"]["arduino_root"] = arduino if arduino
      end

      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end
    end
    
    opts.parse!(args)
    [options, opts]
  end
  
end


# home = ENV['HOME'] || ENV['USERPROFILE'] || ENV['HOMEPATH']
# begin
#   config = YAML::load open(home + "/.rad")
# rescue
#   config = false
# end
# 


# Handle options:
options, parser = OptionParser.parse(ARGV)
sketch_name = ARGV[0]
parser.parse!(["-h"]) unless sketch_name 
  

# Build vendor/rad:  
  
FileUtils.mkdir_p "#{sketch_name}/vendor/rad"
puts "Successfully created your sketch directory."

FileUtils.cp_r "#{File.dirname(__FILE__)}/../lib/rad/.", "#{sketch_name}/vendor/rad"
puts "Installed RAD into #{sketch_name}/vendor/rad"
puts

# Build vendor/libraries:  

FileUtils.mkdir_p "#{sketch_name}/vendor/libraries"
puts "Successfully created your libraries directory."

FileUtils.cp_r "#{File.dirname(__FILE__)}/../lib/libraries/SWSerLCDpa/.", "#{sketch_name}/vendor/libraries/SWSerLCDpa"
puts "Installed SWSerLCDpa into #{sketch_name}/vendor/libraries"
puts

# Build sketch files, etc.:  

FileUtils.touch "#{sketch_name}/#{sketch_name}.rb"
File.open("#{sketch_name}/#{sketch_name}.rb", "w") do |file|
  file << <<-EOS
class #{sketch_name.split("_").collect{|c| c.capitalize}.join("")} < ArduinoSketch
end
  EOS
end
puts "Added #{sketch_name}/#{sketch_name}.rb"

File.open("#{sketch_name}/Rakefile", 'w') do |file|
  file << <<-EOS 
require 'vendor/rad/init.rb'
  EOS
end
puts "Added #{sketch_name}/Rakefile"

FileUtils.mkdir_p "#{sketch_name}/config"
puts "Added #{sketch_name}/config"

File.open("#{sketch_name}/config/hardware.yml", 'w') do |file|
  file << options["hardware"].to_yaml
end
puts "Added #{sketch_name}/config/hardware.yml"

File.open("#{sketch_name}/config/software.yml", 'w') do |file|
  file << options["software"].to_yaml
end
puts "Added #{sketch_name}/config/software.yml"

puts
puts "Run 'rake -T' inside your sketch dir to learn how to compile and upload it."