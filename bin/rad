#!/usr/bin/env ruby

begin
  require 'rubygems'
rescue LoadError
  # no rubygems to load, so we fail silently
end

require 'optparse'
require 'fileutils'
require 'yaml'



class OptionParser #:nodoc:
    
  def self.parse(args)
    # defaults
    
    options = {"hardware" => {
                "serial_port"      => '/dev/tty.usbserial*', 
                "mcu"              => "atmega168", 
                "physical_reset"   => false
                },
                "software" => {
                  "arduino_root"   => "/Applications/arduino-0011"
                 }
               }
    
    opts = OptionParser.new do |opts|
      
      opts.banner = <<-BANNER
Build a directory for your RAD Project and install RAD in its vendor sub-directory.

Usage: #{File.basename($0)} <sketch_dir_name> <options for config>
      BANNER
      
      opts.on("-p", "--port [SERIAL PORT]", 
              "Path to your serial port", 
              "   (default: #{options['hardware']['serial_port']})") do |port|
              
        options["hardware"]["serial_port"] = port if port
      end
      
       opts.on("-m", "--mcu [PROCESSOR TYPE]", 
              "Type of processor on your board", 
              "   (default: #{options['hardware']['mcu']})") do |port|
              
        options["hardware"]["serial_port"] = port if port
      end
      
      opts.on("-r", "--reset [RESET REQUIRED]", 
              "Require a hardware reset before uploading?",
              "   (default: #{options['hardware']['physical_reset']})") do |no_reset|
        options["hardware"]["physical_reset"] = true unless no_reset
      end
      
      opts.on("-a", "--arduino [ARDUINO DIR]", 
              "Path to your Arduino install",
              "   (default: #{options['software']['arduino_root']})") do |arduino|
        options["software"]["arduino_root"] = arduino if arduino
      end

      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end
    end
    
    opts.parse!(args)
    [options, opts]
  end
  
end


# home = ENV['HOME'] || ENV['USERPROFILE'] || ENV['HOMEPATH']
# begin
#   config = YAML::load open(home + "/.rad")
# rescue
#   config = false
# end
# 


# Handle options:
options, parser = OptionParser.parse(ARGV)
sketch_name = ARGV[0]
parser.parse!(["-h"]) unless sketch_name 
  

# Build vendor/rad:  
  
FileUtils.mkdir_p "#{sketch_name}/vendor/rad"
puts "Successfully created your sketch directory."

FileUtils.cp_r "#{File.dirname(__FILE__)}/../lib/rad/.", "#{sketch_name}/vendor/rad"
puts "Installed RAD into #{sketch_name}/vendor/rad"
puts

# Build vendor/libraries:  

FileUtils.mkdir_p "#{sketch_name}/vendor/libraries"
puts "Successfully created your libraries directory."

FileUtils.cp_r "#{File.dirname(__FILE__)}/../lib/libraries/DS1307/.", "#{sketch_name}/vendor/libraries/DS1307"
puts "Installed DS1307 into #{sketch_name}/vendor/libraries"
puts

FileUtils.cp_r "#{File.dirname(__FILE__)}/../lib/libraries/FrequencyTimer2/.", "#{sketch_name}/vendor/libraries/FrequencyTimer2"
puts "Installed FrequencyTimer2 into #{sketch_name}/vendor/libraries"
puts

FileUtils.cp_r "#{File.dirname(__FILE__)}/../lib/libraries/OneWire/.", "#{sketch_name}/vendor/libraries/OneWire"
puts "Installed OneWire into #{sketch_name}/vendor/libraries"
puts

FileUtils.cp_r "#{File.dirname(__FILE__)}/../lib/libraries/Servo/.", "#{sketch_name}/vendor/libraries/Servo"
puts "Installed Servo into #{sketch_name}/vendor/libraries"
puts

FileUtils.cp_r "#{File.dirname(__FILE__)}/../lib/libraries/SWSerLCDpa/.", "#{sketch_name}/vendor/libraries/SWSerLCDpa"
puts "Installed SWSerLCDpa into #{sketch_name}/vendor/libraries"
puts

FileUtils.cp_r "#{File.dirname(__FILE__)}/../lib/libraries/SWSerLCDsf/.", "#{sketch_name}/vendor/libraries/SWSerLCDsf"
puts "Installed SWSerLCDsf into #{sketch_name}/vendor/libraries"
puts

FileUtils.cp_r "#{File.dirname(__FILE__)}/../lib/libraries/Wire/.", "#{sketch_name}/vendor/libraries/Wire"
puts "Installed Wire into #{sketch_name}/vendor/libraries"
puts

# Build examples -- used for basic testing

FileUtils.mkdir_p "#{sketch_name}/vendor/libraries"
puts "Successfully created your examples directory."

FileUtils.cp_r "#{File.dirname(__FILE__)}/../lib/examples/.", "#{sketch_name}/examples"
puts "Installed examples into #{sketch_name}/examples"
puts

# Build test -- used testing

FileUtils.mkdir_p "#{sketch_name}/test"
puts "Successfully created your test directory."

FileUtils.cp_r "#{File.dirname(__FILE__)}/../lib/test/.", "#{sketch_name}/test"
puts "Installed tests into #{sketch_name}/test"
puts

# Build vendor/plugins:  

FileUtils.mkdir_p "#{sketch_name}/vendor/plugins"
puts "Successfully created your plugins directory."

FileUtils.cp_r "#{File.dirname(__FILE__)}/../lib/plugins/.", "#{sketch_name}/vendor/plugins"
puts "Installed Default plugins into #{sketch_name}/vendor/plugins"
puts

# Add an default sketch directory # needed to run test:compile

FileUtils.mkdir_p "#{sketch_name}/#{sketch_name}"
puts "Successfully created your default sketch directory."

# Build sketch files, etc.:  

FileUtils.touch "#{sketch_name}/#{sketch_name}.rb"
File.open("#{sketch_name}/#{sketch_name}.rb", "w") do |file|
  file << <<-EOS
class #{sketch_name.split("_").collect{|c| c.capitalize}.join("")} < ArduinoSketch
  
  # quick overview:
  # external variables can be added.. use a comma separation, colons are added automatically
  # 
  #external_vars :foo => "long unsigned, 0", :bar => "int"
  # result "long unsigned foo = 0" and "int bar;"
  # note while this is ruby, many methods and some operators you take for granted are not implemented
  # some examples: blocks, case statements, +=
  # keep it simple and remember that the arduino uses a simple loop 
  # you can branch out with your other methods here or use 
  # add_to_setup to call a method once (todo: look at signatures)
  # since all the methods are converted to C, assumptions are made regarding variable types
  # for example if we need integers to call serial_print hack = input + output + 1
  # pin examples
  # input_pin 10, :as => :back_on_button, :latch => :off
  # input_pin 12, :as => :back_off_button, :latch => :off
  # output_pin 5, :as => :red_led
  # input_pin 8, :as => :red_button, :latch => :off, :adjust => 250
  # output_pin 4, :as => :top_servo, :min => 700, :max => 2200
  
  # three line servo (don't forget do declare servo_amount')
  # sensor_position = analogRead(sensor)
  # servo_amount = (sensor_position*2 + 500)
  # move_servo top_servo, servo_amount
  # one line debounce:
  # debounce_toggle(button, led)
  # debounce a read (returns high)
  # do_something if debounce_read(button, led)
  
  
  
  # hello world (uncomment to run)
  
  #output_pin 13, :as => :led
  #  def loop
  #    blink led, 100 
  #  end
end
  EOS
end
puts "Added #{sketch_name}/#{sketch_name}.rb"

File.open("#{sketch_name}/Rakefile", 'w') do |file|
  file << <<-EOS 
require 'vendor/rad/init.rb'
  EOS
end
puts "Added #{sketch_name}/Rakefile"

FileUtils.mkdir_p "#{sketch_name}/config"
puts "Added #{sketch_name}/config"

File.open("#{sketch_name}/config/hardware.yml", 'w') do |file|
  file << options["hardware"].to_yaml
end
puts "Added #{sketch_name}/config/hardware.yml"

File.open("#{sketch_name}/config/software.yml", 'w') do |file|
  file << options["software"].to_yaml
end
puts "Added #{sketch_name}/config/software.yml"

puts
puts "Run 'rake -T' inside your sketch dir to learn how to compile and upload it."